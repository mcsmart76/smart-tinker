(define (fast-expt b n)
  (fast-expt-iter b n 1))

(define (fast-expt-iter b n a)
  (cond ((= n 0) a)
        ((even? n) (fast-expt-iter (* b b) (/ n 2) a))
        (else (fast-expt-iter b (- n 1) (* b a)))))

For odd numbers, accumulate b*a into a, and for even numbers square b
while halving the exponent. This flips between odd and even exponents
nicely, as seen in the following example:

(fast-expt 2 7)
(fast-expt-iter 2  7 1)
(fast-expt-iter 2  6 2)
(fast-expt-iter 4  3 2)
(fast-expt-iter 4  2 8)
(fast-expt-iter 16 1 8)
(fast-expt-iter 16 0 128)
128
