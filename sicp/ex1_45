(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      (lambda (x) (f x))
      (compose f (repeated f (- n 1)))))

(define (average x y)
  (/ (+ x y) 2))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (newline)
      (display guess)
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (fast-expt base expt)
  (define (iter b n a)
    (cond ((= n 0) a)
          ((even? n) (iter (* b b) (/ n 2) a))
          (else (iter b (- n 1) (* b a)))))
  (iter base expt 1))

; 8th root needs 3; 2 doesn't converge.
; 16th root needs 4; 3 doesn't converge.
; 32th root needs 5; 4 doesn't converge.
(define (damp-rate n)
  (floor (/ (log n) (log 2))))

(define (nth-root x n)
  (fixed-point ((repeated average-damp (damp-rate n))
                (lambda (y) (/ x (fast-expt y (- n 1)))))
               1.0))

(nth-root 5.0 32)
; 1.0515811985030352
