(define (square x) (* x x))

## square-tree defined directly

(define (square-tree tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (square tree))
        (else
          (cons (square-tree (car tree))
                (square-tree (cdr tree))))))

(square-tree
  (list 1
    (list 2 (list 3 4) 5)
    (list 6 7)))
; (1 (4 (9 16) 25) (36 49))

## square-tree defined with map

(define (square-tree-map tree)
  (map (lambda (t)
         (if (pair? t)
             (square-tree-map t)
             (square t)))
       tree))

(square-tree-map
  (list 1
    (list 2 (list 3 4) 5)
    (list 6 7)))
; (1 (4 (9 16) 25) (36 49))
