(define (square n) (* n n))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (mod (square (expmod base (/ exp 2) m)) m))
        (else (mod (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random-integer (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))

; For BiwaScheme.
(define (runtime)
  (let ((t (current-date)))
    (+ (* 1000 (date-second t)) (date-millisecond t))))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

; Used cond to explicitly return #t and #f, which shouldn't
; be needed for Scheme.
(define (start-prime-test n start-time)
  (cond ((fast-prime? n 10)
         (report-prime (- (runtime) start-time))
         #t)
        (else #f)))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

## Test primes

(timed-prime-test 1009)
(timed-prime-test 1013)
(timed-prime-test 1019)
(timed-prime-test 10007)
(timed-prime-test 10009)
(timed-prime-test 10037)
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)

1009 *** 9
1013 *** 9
1019 *** 10
10007 *** 11
10009 *** 11
10037 *** 11
100003 *** 14
100019 *** 20
100043 *** 21
1000003 *** 16
1000033 *** 17
1000037 *** 17

Even running the test 10 times, the results grow slowly with the size of n.
