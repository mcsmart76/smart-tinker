(define (smallest-divisor n) (find-divisor n 2))

(define (square n) (* n n))

(define (divides? a b) (= (mod b a) 0))

(define (next n)
  (if (= n 2) 3 (+ n 2)))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (prime? n) (= n (smallest-divisor n)))

; For BiwaScheme.
(define (runtime)
  (let ((t (current-date)))
    (+ (* 1000 (date-second t)) (date-millisecond t))))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

; Used cond to explicitly return #t and #f, which shouldn't
; be needed for Scheme.
(define (start-prime-test n start-time)
  (cond ((prime? n)
         (report-prime (- (runtime) start-time))
         #t)
        (else #f)))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes n count)
  (cond ((= count 0) 'done)
        ((even? n)
         (search-for-primes (+ n 1) count))
        ((timed-prime-test n)
         (search-for-primes (+ n 2) (- count 1)))
        (else (search-for-primes (+ n 2) count))))


## Test primes

(timed-prime-test 1009)
(timed-prime-test 1013)
(timed-prime-test 1019)
(timed-prime-test 10007)
(timed-prime-test 10009)
(timed-prime-test 10037)
(timed-prime-test 100003)
(timed-prime-test 100019)
(timed-prime-test 100043)
(timed-prime-test 1000003)
(timed-prime-test 1000033)
(timed-prime-test 1000037)

1009 *** 2
1013 *** 1
1019 *** 2
10007 *** 5
10009 *** 3
10037 *** 2
100003 *** 13
100019 *** 12
100043 *** 9
1000003 *** 37
1000033 *** 36
1000037 *** 42

These are about half the results of Exercise 1.22.
