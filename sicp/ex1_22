(define (smallest-divisor n) (find-divisor n 2))

(define (square n) (* n n))

(define (divides? a b) (= (mod b a) 0))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (prime? n) (= n (smallest-divisor n)))

; For BiwaScheme.
(define (runtime)
  (let ((t (current-date)))
    (+ (* 1000 (date-second t)) (date-millisecond t))))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

; Used cond to explicitly return #t and #f, which shouldn't
; be needed for Scheme.
(define (start-prime-test n start-time)
  (cond ((prime? n)
         (report-prime (- (runtime) start-time))
         #t)
        (else #f)))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes n count)
  (cond ((= count 0) 'done)
        ((even? n)
         (search-for-primes (+ n 1) count))
        ((timed-prime-test n)
         (search-for-primes (+ n 2) (- count 1)))
        (else (search-for-primes (+ n 2) count))))

## 1 000

(search-for-primes 1000 3)
1001
1003
1005
1007
1009 *** 2
1011
1013 *** 2
1015
1017
1019 *** 3

## 10 000

(search-for-primes 10000 3)
10001
10003
10005
10007 *** 11
10009 *** 6
10011
10013
10015
10017
10019
10021
10023
10025
10027
10029
10031
10033
10035
10037 *** 16

## 100 000

(search-for-primes 100000 3)
100001
100003 *** 25
100005
100007
100009
100011
100013
100015
100017
100019 *** 19
100021
100023
100025
100027
100029
100031
100033
100035
100037
100039
100041
100043 *** 22

## 1 000 000

(search-for-primes 1000000 3)
1000001
1000003 *** 64
1000005
1000007
1000009
1000011
1000013
1000015
1000017
1000019
1000021
1000023
1000025
1000027
1000029
1000031
1000033 *** 70
1000035
1000037 *** 67

## Timing

Jumps from 2.3 ms to 11 ms to 22 ms. Expanding to 1.000,000 and 10,000,000 the
times are 67 ms and 218 ms. These increases between 10x steps are
4.8x, 2x, 3x, and 3.3x for an average of about 3.3x increase. This closely
matches âˆš10 = 3.2.
