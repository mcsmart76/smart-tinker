The idea is to flatten the tree into a single list then
count up the elements in that list. We could do this
with (length (fringe tree)), but we're asked to do this
with map.

We do not care about the actual values of the items in
the tree, just that they exist, so we simply accumulate
a sum starting from 0 and returning a list of 1s.

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (enumerate-tree tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))

(define (count-leaves t)
  (accumulate +
              0
              (map (lambda (x) 1) (enumerate-tree t))))

If we don't want to use enumerate-tree (or fringe), then
we can map a procedure that returns 1 if we're at a leaf
or recurses if we are not.

(define (count-leaves t)
  (accumulate +
              0
              (map (lambda (x)
                     (if (not (pair? x))
                         1
                         (count-leaves x)))
                   t)))
