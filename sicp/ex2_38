(define (fold-right op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (fold-right op initial (cdr sequence)))))

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))


(fold-right / 1 (list 1 2 3))
; (/ 1 (/ 2 (/ 3 1)))
; (/ 1 (/ 2 3))
; (/ 1 0.66666)
; 1.5
; Or in other words, (1 / (2 / 3)).

(fold-left / 1 (list 1 2 3))
; (iter 1 '(1 2 3))
; (iter (/ 1 1) '(2 3))
; (iter (/ 1 2) '(3))
; (iter (/ 0.5 3) '())
; 0.16666
; Or in other words, ((1 / 2) / 3)

(fold-right list '() (list 1 2 3))
; (list 1 (list 2 (list 3 nil))
; (1 (2 (3 ())))

(fold-left list '() (list 1 2 3))
; (iter '() '(1 2 3))
; (iter (list '() 1) '(2 3))
; (iter (list '(() 1) 2) '(3))
; (iter (list '((() 1) 2) 3) '())
; (((() 1) 2) 3)


For an operation, op, to have fold-right and fold-left return the
same values, op must return the same value for any x, y, i.e.
(eq? (op x y) (op y x)) must be true for all values. This is
the commutative property.
