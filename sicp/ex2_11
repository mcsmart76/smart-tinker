(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
   (make-interval (min p1 p2 p3 p4)
                  (max p1 p2 p3 p4))))

Of the four combination of sign for lower and upper
bounds, the lower=+ and upper=- is invalid because
then lower > upper. So the three combinations 
of [lower,upper] are [+,+], [-,+], [-,-].

  x     y
lo up lo up  min   max
-----|-----|-----|-----
[+,+] [+,+]  p1    p4
[+,+] [-,+]  p1    p4
[+,+] [-,-]  p3    p2
[-,+] [+,+]  p1    p4
[-,+] [-,+]  unkknown
[-,+] [-,-]  p3    p1
[-,-] [+,+]  p2    p3
[-,-] [-,+]  p2    p1
[-,-] [-,-]  p4    p1

(define (mul-interval x y)
  (let ((a (lower-bound x))
        (b (upper-bound x))
        (c (lower-bound y))
        (d (upper-bound y)))
    (define (p1) (* a c))
    (define (p2) (* a d))
    (define (p3) (* b c))
    (define (p4) (* b d))
    (cond ((and (> a 0) (> b 0) (> c 0) (> d 0))
           (make-interval (p1) (p4)))
          ((and (> a 0) (> b 0) (< c 0) (> d 0))
           (make-interval (p1) (p4)))
          ((and (> a 0) (> b 0) (< c 0) (< d 0))
           (make-interval (p3) (p2)))
          ((and (< a 0) (> b 0) (> c 0) (> d 0))
           (make-interval (p1) (p4)))
          ((and (< a 0) (> b 0) (< c 0) (< d 0))
           (make-interval (p3) (p1)))
          ((and (< a 0) (< b 0) (> c 0) (> d 0))
           (make-interval (p2) (p3)))
          ((and (< a 0) (< b 0) (< c 0) (> d 0))
           (make-interval (p2) (p1)))
          ((and (< a 0) (< b 0) (< c 0) (< d 0))
           (make-interval (p4) (p1)))
          (else (make-interval (min (p1) (p2) (p3) (p4))
                               (max (p1) (p2) (p3) (p4)))))))
